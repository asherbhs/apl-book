:Namespace trees
	⎕IO←0

	⍝ ⌷⍨∘⊂⍨ (select) uses opposite argument order
	I←{(⊂⍵)⌷⍺}    ⍝ approximately {⍵[⍺]}

	⍝ 
	CaLa←{
		⍺≠⍥(≢⍤⍴)⍵: ⍺⍪⍵
		⍺,[⎕IO-.5]⍵
	}

	∇ v←(f _qscan) x
		v←⍬
		:If     2=⎕NC'f' ⋄ g←f∘I
		:ElseIf 3=⎕NC'f' ⋄ g←f
		:EndIf
		{}{
			v,←⍵
			g⍵
		}⍣≡x
	∇

	⍝ aaron's drawing functions

	⍝ dct :: Connectors (Get dlk Join) Formatted_Children
	⍝ -> Connected_Children
	⍝ Joins connectors on a rendered child tree along edge given by Get
	dct←{⍺[(2×2≠/n,0)+(1↑⍨≢m)+m+n←⌽∨\⌽m←' '≠⍺⍺ ⍵]⍵⍵ ⍵}

	⍝ dlk :: Parent (Connector dlk Axis) Connected_Children -> Subtree
	⍝ Links a parent with its prepared children using Connector along Axis
	dlk←{((x⌷⍴⍵)↑[x←2|1+⍵⍵]⍺),[⍵⍵]⍺⍺@(⊂0 0)⍣('┌'=⊃⍵)⊢⍵}

	⍝ dwh :: Children Parent -> Subtree
	⍝ Horizontally render a parent and its children
	dwh←{⍵('┬'dlk 1)' │├┌└─'(0⌷⍉)dct,⊃⍪/((≢¨⍺),¨⊂⌈/≢∘⍉¨⍺)↑¨⍺}

	⍝ dwv :: Children Parent -> Subtree
	⍝ Vertically render a parent and its children
	dwv←{k←⊃{⍺,' ',⍵}/(1+⌈/≢¨⍺){⍺↑⍵⍪⍨'│'↑⍨≢⍉⍵}¨⍺
	 ⍵('├'dlk 0)' ─┬┌┐│'(0⌷⊢)dct(⊣⍪1↓⊢)k}

	⍝ pp3 :: [Labels] (draw pp3) Parent -> Tree_Diagram
	⍝ Pretty print a tree given node labels and a parent vector using draw
	pp3←{⍺←'○' ⋄ l p←⍺⍵ ⋄ F←⍺⍺
		⍝ calculate depths
		d←(⍳≢p)≠p←⍵
		_←{z⊣d+←⍵≠z←p[⍵]}⍣≡p

		G←{
			i←⍸⍺=d             ⍝ nodes on this layer
			k v←↓⍉p[i],∘⊂⌸i    ⍝ parents and children
			(⍵∘I¨v)F¨@k⊢⍵      ⍝ attach children to parents
		}
		(p=⍳≢p)/(1+⍳⌈/d)((⊃G/),∘⊂)⍉⍤⍪⍤⍕¨(≢p)⍴l
	⍝	│      │ │    │  │      │ └──────────┴ rendered subtrees (initially just labels) (accumulated)
	⍝	│      │ └────┴──│──────│───────────── depths
	⍝	│      │         └──────┴───────────── connect children bottom-up
	⍝	└──────┴────────────────────────────── values at roots only
	}

	⍝ test data

	N∆←'ABEFGLMNOPVZ'
	⍝   012345678911
	⍝             01

	p1←0 0 1 0 3 4 3 0 7 8 8 7 11 11 7
	d2←0 1 2 1 2 3 2 1 2 3 3 2 3 3 2

	p2←0 0 1 2 0 4 5 5 7 0 9 10 11 12 13 12 12 16 10 18 19 20 19 19 23 10 25
	d2←0 1 2 3 1 2 3 3 4 1 2 3 4 5 6 5 5 6 3 4 5 6 5 5 6 3 4
	t2←3 1 0 7 1 2 9 0 10 1 3 1 2 0 10 9 0 10 1 2 0 10 9 0 10 0 10

	d3←0 1 2 3 4 5 4 5 6 7 6 6 7 4 5 6 5 6 7 8
	p3←0 0 1 2 3 4 3 6 7 8 7 7 11 3 13 14 13 16 17 18
	t3←3 1 3 2 0 10 3 2 0 10 9 0 10 2 0 10 3 2 0 10
	k3←1 2 1 2 1 0 1 2 1 0 0 1 0 2 1 0 1 2 1 0
	n3←0 ¯5 0 0 0 ¯2 0 0 0 ¯2 ¯6 0 ¯1 0 0 ¯2 0 0 0 ¯2
	r3←0 0 0 2 2 2 2 6 6 6 6 6 6 2 2 2 2 16 16 16

	d4←0 1 2 3 4 5 4 5 6 7 6 6 7 4 5 6 5 6 7 8 7 7 8 5 6 7 6 7 8 9 8 8 9 6 7
	p4←0 0 1 2 3 4 3 6 7 8 7 7 11 3 13 14 13 16 17 18 17 17 21 13 23 24 23 26 27 28 27 27 31 23 33
	t4←3 1 3 2 0 10 3 2 0 10 9 0 10 2 0 10 3 2 0 10 9 0 10 2 0 10 3 2 0 10 9 0 10 0 10
	k4←1 2 1 2 1 0 1 2 1 0 0 1 0 2 1 0 1 2 1 0 0 1 0 2 1 0 1 2 1 0 0 1 0 1 0
	n4←0 ¯5 0 0 0 ¯2 0 0 0 ¯2 ¯6 0 ¯1 0 0 ¯2 0 0 0 ¯2 ¯6 0 ¯1 0 0 ¯2 0 0 0 ¯2 ¯6 0 ¯1 0 ¯1
	r4←0 0 0 2 2 2 2 6 6 6 6 6 6 2 2 2 2 16 16 16 16 16 16 2 2 2 2 26 26 26 26 26 26 2 2

	⍝ wrapping expressions
	⍝ note the digram is slightly different to the one in the thesis
	p5←0 0 1 15 3 3 5 6 15 8 15 10 11 10 10 15
	t5←3 1 10 4 10 1 0 7 0 7 2 0 7 9 10 3
	k5←0 1 1 0 0 0 0 0 0 0 2 0 0 1 0 1
	n5←0 ¯5 15 0 ¯1 ¯6 0 ¯7 0 ¯8 0 0 ¯9 ¯10 ¯1 0
	r5←0 0 0 15 15 15 15 15 15 15 15 15 15 15 15 0

	⍝ lifting guards
	⍝ again, different to the thesis
	p6←0 0 1 2 20 4 4 6 7 20 9 10 10 10 9 14 15 20 17 18 20
	t6←3 2 1 10 4 10 2 0 7 4 2 10 9 10 2 0 7 2 0 7 3
	k6←0 ¯1 1 1 0 0 0 0 0 0 2 0 1 0 0 0 0 0 0 0 1
	n6←0 ¯5 ¯5 20 0 ¯1 0 0 0 0 0 ¯2 ¯6 ¯1 0 0 ¯7 0 0 ¯8 0
	r6←0 0 0 0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 0

	⍝ counting indexing rank

	p7←0 0 1 2 53 4 5 5 5 8 9 0 11 12 54 14 15 15 15 18 19 18 21 0 23 24 55 26 27 27 27 30 31 30 33 30 35 0 37 38 56 40 41 41 41 44 45 44 47 44 49 44 51 53 54 55 56
	t7←3 2 1 10 2 2 10 9 2 0 9 2 1 10 2 2 10 9 2 0 9 0 9 2 1 10 2 2 10 9 2 0 9 0 9 0 9 2 1 10 2 2 10 9 2 0 9 0 9 0 9 0 9 3 3 3 3
	k7←0 ¯1 1 1 0 2 0 1 3 3 0 ¯1 1 1 0 2 0 1 3 3 0 3 0 ¯1 1 1 0 2 0 1 3 3 0 3 0 3 0 ¯1 1 1 0 2 0 1 3 3 0 3 0 3 0 3 0 1 1 1 1
	n7←0 ¯5 ¯5 53 0 0 ¯1 ¯6 0 0 ¯7 ¯8 ¯8 54 0 0 ¯1 ¯6 0 0 ¯7 0 ¯7 ¯9 ¯9 55 0 0 ¯1 ¯6 0 0 ¯7 0 ¯7 0 ¯7 ¯10 ¯10 56 0 0 ¯1 ¯6 0 0 ¯7 0 ¯7 0 ¯7 0 ¯7 0 0 0 0
	r7←0 0 0 0 53 53 53 53 53 53 53 0 0 0 54 54 54 54 54 54 54 54 54 0 0 0 55 55 55 55 55 55 55 55 55 55 55 0 0 0 56 56 56 56 56 56 56 56 56 56 56 56 56 0 0 0 0

	⍝ flattening expressions

	p8←0 0 1 2 24 4 5 6 6 6 24 10 11 12 13 13 12 16 16 16 19 11 11 22 24
	t8←3 2 1 10 2 1 2 10 9 10 2 2 2 8 9 9 2 10 9 0 7 9 0 7 3
	k8←0 ¯1 1 1 ¯1 0 2 0 1 0 0 2 1 2 2 1 2 0 1 0 0 1 0 0 1
	n8←0 ¯5 ¯5 24 ¯6 ¯6 0 ¯2 ¯7 ¯1 0 0 0 0 ¯8 ¯9 0 ¯6 ¯10 0 ¯11 ¯10 0 ¯12 0
	r8←0 0 0 0 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 0

	⍝ how to do stuff

	⍝ all nodes which are a child of a node in n
	Children←{p i←⍺⍵
		⍸p∊i
	}

	⍝ indices of leaf nodes
	Leaves←{p←⍵
		p~⍨⍳≢p
	}

	DepthToPathMatrix←{d←⍵
		⌈\⌈⍀(⍳≢d)@(d,¨⍳≢d)⊢(1+⌈/d)(≢d)⍴0
	}

	⍝ shortest distance between two nodes
	DistanceMatrix←{d←⍵
		0⌈(∘.+⍨d)-2×¯1+(⍉+.=⊢) DepthToPathMatrix d
		⍝ │     │   └────────┴─length of common prefix
		⍝ └─────┴──────────────distance passing through root
	}

	Roots←{p←⍵
		I⍣≡⍨p
	}

	D2P←{d←⍵
		⍝ 0⌈¯1++/∨\((⊢∘.>⌽)d)∧(⊢∘.>⌽)⍳≢d    ⍝ quadratic :(
		p←⍳≢d
		_←2{p[⍵]←⍺[⍺⍸⍵]}/⊂⍤⊢⌸d
		⍝ │ │   ││    │ │└───┴─── indices of each level
		⍝ └─│───││────│─┴──────── pairwise between levels
		⍝   │   │└────┴────────── most recent node at previous level - the parent
		⍝   └───┴──────────────── make this the parent
		p
	}

	_traverse←{p←⍵
		I@⍺⍺⍣≡⍨p
	}

	NearestLexicalContour←{t p←⍺⍵
		{t[⍵]≠3}_traverse p
	}

	Lift←{(p t k n r)←⍵
		p,←n[i]←(≢p)+⍳≢i←⍸(t=3)∧p≠⍳≢p
	⍝	│ ││          │└────────────┴─ nodes to be lifted
	⍝	│ │└──────────┴─────────────── set pointers
	⍝	└─┴─────────────────────────── append new nodes
		t k n r,←3 1 0(r[i])⍴⍨¨≢i    ⍝ data for new nodes
		p r I⍨←⊂n[i]@i⊢⍳≢p           ⍝ adjust pointers to point to new nodes
		t k (⊣@i⍨)←10 1              ⍝ old nodes are now redirect nodes
		p t k n r
	}

	⍝ joins trees in order, fixing parents
	⍝ associated data can be ,/ together and it will match up just fine
	Forest←{ps←⍵
		⊃,/ps++\¯1↓0,≢¨ps
	}

	Deforest←{p←⍵
		(I⍣≡⍨{⊂⍵-⍵I⍨+\~p∊⍵}⌸⊢)p
	}

	Snip←{i p←⍺⍵
		i@i⊢p
	}

	WrapExpressions←{p t k n r←⍵
		i←(⍸(~t∊3 4)∧t[p]=3),{⍵⌿⍨2|⍳≢⍵}⍸t[p]=4
		⍝  │              │  └───────────────┴─── guard consequents
		⍝  └──────────────┴────────────────────── other returning expressions
		p t k n r/⍨←⊂m←2@i⊢1⍴⍨≢p                ⍝ double nodes to be wrapped
		p r i I⍨←⊂j←¯1++\m                      ⍝ fix pointers in p r i
		n←j I@(0≤⊢)n                            ⍝ fix pointers in n (only the +ve elements)
		p[i]←j←i-1                              ⍝ point to wrappers
		k[j]←-(k[r[j]]=0)∨0@({⊃⌽⍵}⌸p[j])⊢t[j]=1
		⍝    │ │       │  └───────────────────┴── non-final binding nodes
		⍝    │ └───────┴───────────────────────── top level nodes
		⍝    └─────────────────────────────────── ¯1 when not a return node, else 0
		t[j]←2                                  ⍝ expression type
		p t k n r
	}

	⍝ [3,4,5,1,2,null,null,null,null,0]
	⍝ [1,2,3,null,5,null,4]
	⍝ [1,2,3,null,5,null,6,7,null,null,8,9,10]
	Leet←{s←⍵
		v s←1(↑,⍥⊂↓)','(≠⊆⊢)s/⍨~s∊'[] '
		⍝   │      ││      │└─────────┴─── get rid of extra characters
		⍝   │      │└──────┴────────────── split on ,s
		⍝   └──────┴────────────────────── grab first element for data of root
		p←,0                             ⍝ root node self loop
		q←,0                             ⍝ initial frontier is only root node
		_←{
			s,←(⊂'null')⍴⍨0⌈(2×≢q)-≢s    ⍝ the format allows you to omit trailing nulls, so we add them back
			cv←⍬
			cv s⊢←s(↑,⍥⊂↓)⍨2×≢q          ⍝ grab data for children
			m←'null'∘≢¨cv                ⍝ mask of real children
			i←(≢p)+⍳+/m                  ⍝ new ids of children
			p,←m/2/q                     ⍝ parents of children
			v,←m/cv                      ⍝ data of children
			q⊢←i                         ⍝ new children are the next frontier 
			0=≢s                         ⍝ stop if we are out of data
		}⍣⊣⍬
		p v
	}

	⍝ note: not guaranteed DFPT!!
	Depth←{p←⍵
		d←p≠⍳≢p
		_←{q⊣d+←⍵≠q←p[⍵]}⍣≡p
		d
	}

	Lisp←{p←⍵
		d←Depth p
		r←,¨⍳≢p                        ⍝ seeded value

		_←{p[i]{(⍺⊃r),←⍵}⌸r[i←⍸d=⍵]}¨⌽1+⍳⌈/d
		⍝  │  │ │      │  │ │    │  └──────┴ for each non-root layer, starting from the bottom
		⍝  │  │ │      │  │ └────┴────────── nodes at this depth
		⍝  └──┴─│──────│──┴───────────────── group child results by parent id
		⍝       └──────┴──────────────────── append child results to result of parent

		⍝ _←{r[p[i]],←⊂¨r[i←⍸d=⍵]}¨⌽1+⍳⌈/d
		⍝ ⍝  │         │  │    │  └──────┴ for each non-root layer, starting from the bottom
		⍝ ⍝  │         │  └────┴────────── nodes at this depth
		⍝ ⍝  └─────────┴────────────────── append lispification to result of parent

		r/⍨p=⍳≢p                       ⍝ return values at roots only

		⍝ if you're so inclined
	⍝	(p=⍳≢p)/⊃{l@(⊃¨l)⊢⍵⊣l←p[i](,/,∘(⊂¨)⍥(⍵∘I))⌸i←⍸d=⍺}/(1+⍳⌈/d),⊂,¨⍳≢p
	⍝	│      │  │       │   │  │ │            │ ││    │ └──────────────┴ fold over depths with accumulator of labels
	⍝	│      │  │       │   │  │ │            │ │└────┴ nodes at this depth
	⍝	│      │  │       │   └──┴─│────────────│─┴ group by parent
	⍝	│      │  │       │        └────────────┴ join labels of children and parent lispily
	⍝	│      │  └───────┴ put each label in place and pass on
	⍝	└──────┴─ return roots only
	}

	gvStyle←⍬
	gvStyle,←⊂'    graph ['
	gvStyle,←⊂'        bgcolor = black'
	gvStyle,←⊂'        pad     = 2'
	gvStyle,←⊂'    ]'
	gvStyle,←⊂'    node ['
	gvStyle,←⊂'        style     = filled'
	gvStyle,←⊂'        shape     = circle'
	gvStyle,←⊂'        color     = white'
	gvStyle,←⊂'        fillcolor = gray10'
	gvStyle,←⊂'        fontcolor = white'
	gvStyle,←⊂'        fontname  = BQN386'
	gvStyle,←⊂'        penwidth  = 2.5'
	gvStyle,←⊂'    ]'
	gvStyle,←⊂'    edge ['
	gvStyle,←⊂'        color    = white'
	gvStyle,←⊂'        penwidth = 2.5'
	gvStyle,←⊂'    ]'

	⍝ p v←Collatz 10
	⍝ (⊂v GV p)⎕NPUT'tree.gv'1
	⍝ ⎕SH 'dot -Tpng tree.gv > tree.png'
	⍝ ⎕SH 'dot -Tpng tree.gv | feh -B black -'
	GV←{⍺←' ' ⋄ p←⍵ ⋄ v←⍺⍴⍨≢p
		gv←,⊂'digraph {'
		gv,←gvStyle
		gv,←⊂'    rankdir = RL'
		f←⍕¨⍳≢p
		d←Depth p
		_←{
			i←⍸d=⍵
			gv,←⊂'    {rank = same'
			gv,←⊂'        ',(¯1↓⊃,/f[i],¨' ')
			gv,←{'        ',(¯4↓⊃,/f[⍵],¨⊂' -> '),' [style = invis]'}¨(⊢⊢⍤/⍨2≤≢¨)p[i]⊂⍤⊢⌸i
			gv,←⊂'    }'
			⍬
		}¨⌽1+⍳⌈/d
		gv,←'    '∘,¨f,¨' [label="'∘,¨(⍕¨v),¨⊂'"]'
		gv,←{'    ',⍺,' -> ',⍵}/⍤1⊢f[(≠/⊢⍤⌿⊢)(⍳≢p),⍪p]
		gv,←,⊂'}'
		gv
	}

	GVV←{⍺←' ' ⋄ p←⍵ ⋄ v←⍺⍴⍨≢p
		gv←,⊂'digraph {'
		gv,←gvStyle
		gv,←⊂'    rankdir=TB'
		f←⍕¨⍳≢p
		gv,←⊂'    {rank = same'
		gv,←⊂'        ',¯1↓⊃,/f,¨' '
		gv,←⊂'        ',(¯4↓⊃,/f,¨⊂' -> '),' [style = invis]'
		gv,←⊂'    }'
		gv,←'    '∘,¨f,¨' [label="'∘,¨(⍕¨v),¨⊂'"]'
		gv,←{'    ',⍺,' -> ',⍵}/⍤1⊢f[(≠/⊢⍤⌿⊢)(⍳≢p),⍪p]
		gv,←,⊂'}'
		gv
	}

	PP←{⍺←'∘' ⋄ v p←⍺⍵
		d←Depth p
		r←(≢p)⍴⍉⍤⍪⍤⍕¨v
		md←⌈/d
		md=0: r    ⍝ avoid the each running on the prototype
		_←{
			i←⍸d=⍵
			_←p[i]{
				ws←(1⊃⍴)¨⍵
				w←¯1++/1+ws
				cs←(+\0,¯1↓1+ws)+¯1+⌈2÷⍨ws
				b←w⍴' '
				b[(⊢⊢⍤/⍨((⊃⌽cs)>⊢)∧(⊃cs)<⊢)⍳w]←'─'
				b[   ⊃ cs]←'┌'
				b[   ⊃⌽cs]←'┐'
				b[¯1↓1↓cs]←'┬'
				b[(1=≢cs)⍴⊃cs]←'│'
				c←¯1+⌈2÷⍨w
				b[c]←'┴├┼┤│'['─┌┬┐│'⍳b[c]]
				t←b⍪¯1↓⍤1⊃,/,∘' '¨((⌈/≢¨)↑¨⊢)⍵
				rp←⍺⊃r
				ww←1⊃⍴rp
				cc←¯1+⌈2÷⍨ww
				t ←((c-cc)⌽ww↑⍤1⊢)⍣(w<ww)⊢t
				rp←((cc-c)⌽ w↑⍤1⊢)⍣(w>ww)⊢rp
				t⍪⍨←rp
				r[⍺]←⊂t
				⍬
			}⌸r[i]
			⍬
		}¨⌽1+⍳md
		r/⍨p=⍳≢p
	}

	Collatz←{d←⍵
		p←0 0 1 2
		v←1 2 4 8
		d<3: p v↑¨⍨d+1
		q←,3
		_←{
			m←4=6|v[q]
			i←(≢p)+⍳(≢q)++/m
			v,←(2×v[q]),3÷⍨v[m/q]-1
			p,←q,m/q
			q⊢←i
			⍬
		}⍣(d-3)⊢⍬
		p v
	}

	Nary←{⍺←3 ⋄ d n←⍺⍵
		p←,0
		q←,0
		_←{
			i←(≢p)+⍳n×≢q
			p,←n/q
			q⊢←i
			⍬
		}⍣d⊢⍬
		p
	}

	Mary←{⍺←3 ⋄ d n←⍺⍵
		0,n/⍳(1-n*d)÷1-n
	⍝	0,n/⍳+/×\1,d⍴n    ⍝ shorter but slower, closed forms go brrr
	}

	Sum←{⍺←⍳≢⍵ ⋄ v p←⍺⍵
		d←Depth p
		md←⌈/d
		md=0: v
		_←{v[p[i]]+←v[i←⍸d=⍵]}¨⌽1+⍳⌈/d
		v/⍨p=⍳≢p
	}

	Sum2←{⍺←⍳≢⍵ ⋄ v p←⍺⍵
		(I⍣≡⍨p)+/⍤⊢⌸v
	}

	LiftGuardTests←{p t k n r←⍵
		i←{⍵/⍨~2|⍳≢⍵}⍸t[p]=4
		⍝ │         │└─────┴─────── two children of each guard node
		⍝ └─────────┴────────────── only the first of each pair - the test expressions
		x←p[i]                    ⍝ the guard nodes
		p[i]←p[x]                 ⍝ make test expressions siblings of guards
		t[i,x]←t[x,i]             ⍝ swap types
		k[i,x]←k[x,i]             ⍝ swap kinds
		n[x]←n[i]                 ⍝ swap data
		p←((x,i)@(i,x)⊢⍳≢p)[p]    ⍝ swap children
		p t k n r
	}

	CountIndexRank←{p t k n r←⍵
		n[p⌿⍨(t[p]=2)∧k[p]=3]+←1
	⍝	│ │ │└─────────────┴─│─│─ mask of children of indexing nodes
	⍝	│ └─┴────────────────│─│─ parents repeated as many times as they have children
	⍝	└────────────────────┴─┴─ increment n that many times
		p t k n r
	}

	CountChildren←{p←⍵
		(⍳≢p)((+/∘.=)-=)p
	}

	Dbg←{p t←⍵
		('(',¨')',⍨¨(⍕¨⍳≢t),¨N∆[t]) PP p
	}

	FlattenExpression←{p t k n r←⍵
		i←⍸t∊4 0 1 2 8 9 10        ⍝ nodes to be lifted: Guard, Atomic, Bind, Expr, Oper, Prim, Var
		x←p I@{~t[p[⍵]]∊3 4}⍣≡i    ⍝ nodes at the level to be lifted to
		p[i]←p[x]                  ⍝ reparent nodes
		j←(⌽i)[⍋⌽x]                ⍝ permuted i which reverses nodes within a statement
		⍝  └┴─│───│───────────────── reverse nodes
		⍝     └───┴───────────────── sort by containing statement
		p[i]←p[j]
		t[i]←t[j]
		k[i]←k[j]
		n[i]←n[j]
		r[i]←r[j]
		p←(j@i⊢⍳≢p)[p]             ⍝ each node pointing to an i must now point to the corresponding j
		p t k n r
	}

	⍝ any associated vectors can just be ⌽ed
	Invert←{p←⍵
		(¯1+≢-⌽)p    ⍝ equivalent to (⌽⍳≢p)[⌽p] but quicker
		⍝│   │└─────── reverse order of siblings
		⍝└───┴──────── recompute parents
	}

	Height←{p←⍵
		r←0⍴⍨≢p
		d←Depth p
		md←⌈/d
		md=0: r
		_←{p[i]{r[⍺]←1+⌈/r[⍵]}⌸i←⍸d=⍵}¨⌽1+⍳md
		r
	}

	HeightBalanced←{p←⍵
		∧/p{1≥(⌈/-⌊/)⍵}⌸Height p
	}

	⍝ slooooow, just for demo trees
	Factorisation←{n←⍵
		p←,0
		v←,n
		pr←(⊢~∘.×⍨)2↓⍳1+n
		n∊pr: p v
		_←{
			p,←2⍴¯1+≢p
			f←⊃pr/⍨0=pr|n
			n÷←f
			v,←f n
			n∊pr
		}⍣⊣⍬
		p v
	}

	Delete←{x p←⍺⍵
		m←x∊⍨p I@{~⍵∊x}⍣≡⍳≢p    ⍝ mask of nodes which are in x or a child of x
	⍝	  │ ││          │└─┴───── every node
	⍝	  │ │└──────────┴──────── go to parent until we hid a node in x or a self loop
	⍝	  └─┴──────────────────── mask of those nodes which hit a node in x eventually
		(⍸m)(⊢-1+⍸)(~m)/p
	⍝	 ││  │││ │ └────┴──────── delete the nodes
	⍝	 └┴──│││─│─────────────── nodes which were deleted
	⍝	     ││└─┴─────────────── how many deleted nodes came before this parent
	⍝	     └┴────────────────── correct parent - it is now that many indices farther back
	}

	Sc←{ ⍝ +\ on contiguous nonzero segments
		sc←+\⍵
		(⍵≠0)×sc-⌈\(sc-⍵)×2</0,⍵    ⍝ should be (+×0≠⊢)\⍵ but scan is actually reduction on prefixes
	⍝	│    ││ ││││    ││└────┴───── where a segment starts
	⍝	│    ││ │││└────┴│─────────── sum not including each
	⍝	│    ││ │└┴──────┴─────────── sum before each segment
	⍝	│    │└─┴──────────────────── remove that from the scan to rebase at 0
	⍝	└────┴─────────────────────── zero out everything not in a segment
	}

	Calc←{
		c←'()+-×÷0123456789'
		⍝  ( ) + - × ÷ 0 1 2 3 4 5 6 7 8 9
		cc←0 1 2 3 4 5 6 6 6 6 6 6 6 6 6 6
		s←'(',⍵~' '
		t←{6≠cc[c⍳x←⊃⍵]: x ⋄ 10⊥⎕D⍳⍵}¨s⊂⍨1,2(~∧⍥(6∘=))/cc[c⍳s]
		d←0,¯1↓+\-⌿'()'∘.≡t
		m←')'∘≢¨t
		t/⍨←m
		d/⍨←m
		p←D2P d
		_p←{
			i←⍵~⍺
			j←⍸⍺⍺∘≡¨t I i
			0=≢j: ⍬
			_←{
				k←i[⍵]            ⍝┐              ∘   
				p[¯1↓k]←1↓k       ⍝│              │   
				p[i[⍵+1]]←k       ⍝│     ∘        +   
				p[i[¯1+⊃⍵]]←⊃k    ⍝┘ ┌─┬─┼─┬─┐ → ┌┴─┐ 
				⍬                 ⍝  a + b + c   +  c 
			}¨j⊂⍨1,2≠2-⍨/j        ⍝             ┌┴┐   
			⍬                     ⍝             a b
		}
		ip←⍳≢p
		_←p('÷'_p⌸)ip
		_←p('×'_p⌸)ip
		_←p('+'_p⌸)ip
		_←p('-'_p⌸)ip
		m←'('∘≡¨t
		p I⍨←p I@{m}⍳≢p
		p[i]←i←⍸p=p[p]
		p←(⍸m)(⊢-1+⍸)(~m)/p
		t←(~m)/t
		d←Depth p
		r←t
		_←{
			i←⍸d=⍵
			p[i]{
				t[⍺]='÷': r[⍺]←÷/r[⍵]
				t[⍺]='×': r[⍺]←×/r[⍵]
				t[⍺]='+': r[⍺]←+/r[⍵]
				t[⍺]='-': r[⍺]←-/r[⍵]
			}⌸i
			⍬
		}¨⌽1+⍳⌈/d
		r[⊃⍸p=⍳≢p]
	}

:EndNamespace
